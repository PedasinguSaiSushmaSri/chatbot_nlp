from flask import Flask, render_template, request
import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from fuzzywuzzy import fuzz, process

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')

app = Flask(__name__)

# Initialize lemmatizer and stopwords
lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    tokens = word_tokenize(text.lower())
    tokens = [token for token in tokens if token not in stop_words]
    pos_tags = nltk.pos_tag(tokens)
    lemmatized = [lemmatizer.lemmatize(word, pos=get_wordnet_pos(tag)) for word, tag in pos_tags]
    return '-'.join(lemmatized)

def get_wordnet_pos(tag):
    tag = tag[0].upper()
    tag_dict = {"J": nltk.corpus.reader.wordnet.ADJ,
                "N": nltk.corpus.reader.wordnet.NOUN,
                "V": nltk.corpus.reader.wordnet.VERB,
                "R": nltk.corpus.reader.wordnet.ADV}
    return tag_dict.get(tag, nltk.corpus.reader.wordnet.NOUN)

# Load processed data
processed_df = pd.read_csv('processed_questions_answers.csv')

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        user_question = request.form['question']
        processed_user_question = preprocess_text(user_question)
        
        # Check for exact match
        matching_row = processed_df[processed_df['Processed_Question'] == processed_user_question]
        
        if not matching_row.empty:
            answer = matching_row.iloc[0]['Answer']
        else:
            choices = processed_df['Processed_Question'].tolist()
            best_match = process.extractOne(processed_user_question, choices, scorer=fuzz.token_sort_ratio)
            
            if best_match and best_match[1] > 60:
                best_match_index = choices.index(best_match[0])
                answer = processed_df.iloc[best_match_index]['Answer']
            else:
                answer = "I'm sorry, I don't have an answer to that question."
        
        return render_template('index.html', question=user_question, answer=answer)
    
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)

